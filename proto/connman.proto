syntax = "proto3";

package connman;

service ConnMan {
    // Registers a image and returns an Id. This allows us to pull images ahead of time.
    rpc RegisterImage(RegisterImageRequest) returns (RegisterImageResponse) {}

    // Add a new proxy which forward connection to a container.
    rpc AddProxy(AddProxyRequest) returns (AddProxyResponse) {}
    // Remove previously added proxy.
    rpc RemoveProxy(RemoveProxyRequest) returns (RemoveProxyResponse) {}
}


// TODO: Pass on registry credentials
message RegisterImageRequest {
    string image = 2;
    string tag = 3;
    // Port which the image exposes
    int32  port    = 4;
}

message RegisterImageResponse {
    bool ok = 1;
    oneof response {
        uint64 id = 2;
        string error = 3;
    }
}

// Wether to use TLS or TCP Listener for incomming requests
// TLS Listener will only be used if the service was started 
// with a wild card certificate
enum ConnectionType {
    Tls = 0;
    Tcp = 1;
}

// TODO: Requires challenge resource allocation metrics.
message AddProxyRequest {
    uint64 id = 1;
    ConnectionType connection_type = 2;

    optional string env_key = 3;
    optional string env_value = 4;
}

message Proxy {
    uint64 proxy_id = 1;
    string host  = 2;
    string port  = 3;

}

message AddProxyResponse {
    bool ok = 1;
    oneof response {
        Proxy proxy  = 2;
        string error = 3;
    }
}

message RemoveProxyRequest {
    uint64 id = 1;
}

message RemoveProxyResponse {
    bool ok = 1;
    oneof response {
        uint64 id    = 2;
        string error = 3;
    }
}